/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

/ {
    combos {
        compatible = "zmk,combos";

        Del {
            bindings = <&kp DEL>;
            key-positions = <12 11>;
            layers = <0>;
        };

        vol_up {
            bindings = <&kp C_VOLUME_UP>;
            key-positions = <8 24>;
            layers = <2>;
        };

        vol_down {
            bindings = <&kp C_VOL_DN>;
            key-positions = <24 20>;
            layers = <2>;
        };

        next_track {
            bindings = <&kp C_NEXT>;
            key-positions = <24 21>;
            layers = <2>;
        };

        prev_track {
            bindings = <&kp C_PREVIOUS>;
            key-positions = <24 19>;
            layers = <2>;
        };

        play_pause {
            bindings = <&kp C_PLAY_PAUSE>;
            key-positions = <24 7>;
            layers = <2>;
        };

        mute {
            bindings = <&none>;
            key-positions = <24 9>;
            layers = <2>;
        };

        gaming_off {
            bindings = <&tog 4>;
            key-positions = <0 5 38>;
            layers = <4>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BSPC |
            // | SHFT |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  | ENTR |
            // | CTRL |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   | ./, | '/" |  /* | EQU |
            //                    | GUI | LWR | SPC |   | SPC | L2   | L1  |

            bindings = <
&kp ESCAPE      &kp Q  &kp W  &kp F     &kp P  &kp B        &kp J      &kp L  &kp U         &kp Y    &kp SEMI  &kp BSPC
&kp LEFT_SHIFT  &kp A  &kp R  &kp S     &kp T  &kp G        &kp M      &kp N  &kp E         &kp I    &kp O     &kp APOS
&kp LCTRL       &kp Z  &kp X  &kp C     &kp D  &kp V        &kp K      &kp H  &kp COMMA     &kp DOT  &kp FSLH  &kp TAB
                              &kp LGUI  &mo 1  &kp SPACE    &kp ENTER  &mo 2  &kp LEFT_ALT
            >;
        };

        lower_layer {
            // -----------------------------------------------------------------------------------------
            // | SYSR |     |     |     |     |     |   |     |  1  |  2  |  3  |  0  |      |
            // |      |     |     | UP  |     |     |   |     |  4  |  5  |  6  |     |      |
            // |      |     | LFT | DWN | RGT |     |   |     |  7  |  8  |  9  |     |      |
            //                    |     |     | SPC |   | SPC |     |     |

            bindings = <
&trans  &kp TILDE      &kp EXCL     &kp AT      &kp LEFT_BRACKET      &kp RIGHT_BRACKET        &kp PLUS   &kp N7        &kp N8        &kp N9        &kp ASTRK  &trans
&trans  &kp GRAVE      &kp HASH     &kp DOLLAR  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS    &kp MINUS  &kp NUMBER_4  &kp NUMBER_5  &kp NUMBER_6  &kp SLASH  &trans
&trans  &kp BACKSLASH  &kp PERCENT  &kp AMPS    &kp LEFT_BRACE        &kp RIGHT_BRACE          &kp N0     &kp N1        &kp N2        &kp N3        &kp EQUAL  &trans
                                    &trans      &trans                &trans                   &trans     &trans        &trans
            >;
        };

        raise_layer {
            bindings = <
&trans  &msc SCRL_UP    &mkp RCLK       &mmv MOVE_UP    &mkp LCLK        &kp PAGE_UP      &kp PAGE_UP    &trans          &kp UP_ARROW    &trans     &kp HOME  &trans
&trans  &msc SCRL_DOWN  &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_RIGHT  &kp PAGE_DOWN    &kp PAGE_DOWN  &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT  &kp END   &trans
&trans  &trans          &msc SCRL_LEFT  &mkp MCLK       &msc SCRL_RIGHT  &trans           &trans         &trans          &trans          &trans     &trans    &trans
                                        &trans          &trans           &trans           &trans         &trans          &trans
            >;
        };

        both {
            bindings = <
&kp F1  &kp F2  &kp F3  &kp F4   &kp F5   &kp F6             &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4  &bt BT_CLR
&kp F7  &kp F8  &kp F9  &kp F10  &kp F11  &kp F12            &trans        &trans        &trans        &trans        &trans        &trans
&trans  &trans  &trans  &trans   &trans   &kp PRINTSCREEN    &trans        &trans        &trans        &trans        &trans        &tog 4
                        &trans   &trans   &trans             &trans        &trans        &trans
            >;
        };

        gaming_1 {
            bindings = <
&kp ESC    &kp Q  &kp W  &kp E         &kp R  &kp T        &trans  &trans  &trans  &trans  &trans  &trans
&kp LSHFT  &kp A  &kp S  &kp D         &kp F  &kp G        &trans  &trans  &trans  &trans  &trans  &trans
&kp LCTRL  &kp Z  &kp X  &kp C         &kp V  &kp B        &trans  &trans  &trans  &trans  &trans  &trans
                         &kp LEFT_ALT  &mo 5  &kp SPACE    &trans  &trans  &trans
            >;
        };

        gaming_2 {
            bindings = <
&kp N1   &kp N2  &kp N3  &kp N4  &kp N5  &kp N6    &trans  &trans  &trans  &trans  &trans  &trans
&kp TAB  &kp H   &kp J   &kp K   &kp L   &kp M     &trans  &trans  &trans  &trans  &trans  &trans
&kp N    &kp Y   &kp U   &kp I   &kp O   &kp P     &trans  &trans  &trans  &trans  &trans  &trans
                         &kp F5  &trans  &kp F9    &trans  &trans  &trans
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        both {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };
};

//For new Layers
// -----------------------------------------------------------------------------------------
// |      |     |     |     |     |     |   |     |     |     |     |     |      |
// |      |     |     |     |     |     |   |     |     |     |     |     |      |
// |      |     |     |     |     |     |   |     |     |     |     |     |      |
//                    |     |     |     |   |     |     |     |
